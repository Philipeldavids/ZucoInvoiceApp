using BusinessLayer.Services;
using DataLayer.Database;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;

namespace ZucoInvoiceApp.Controllers
{
    [ApiController]
    [Route("api/v1/[controller]")]
    public class SubscriptionController : ControllerBase
    {
        private readonly ISubscriptionService _service;
        private readonly ApplicationDbContext _context;
        private readonly IPaystackService _paystackService;
        public SubscriptionController(ISubscriptionService service, ApplicationDbContext context, IPaystackService paystackService)
        {
            _service = service;
            _context = context;            
            _paystackService = paystackService;

        }

        [HttpPost("subscribe")]
        public async Task<IActionResult> Subscribe([FromBody] SubscribeRequest req)
        {
            await _service.SubscribeAsync(req.UserId, req.PlanName, req.Reference);
            return Ok(new { message = "Subscription activated!" });
        }

        [HttpGet("can-generate/{userId}")]
        public async Task<IActionResult> CanGenerate(string userId)
        {
            bool canGenerate = await _service.CanGenerateInvoice(userId);
            return Ok(new { canGenerate });
        }



        [HttpGet("current/{Id}")]
        public async Task<IActionResult> GetCurrentSubscription(string Id)
        {
            var subscription = await _context.Subscriptions
                .Where(s => s.UserId == Id && s.IsActive && s.EndDate > DateTime.UtcNow)
                .OrderByDescending(s => s.EndDate)
                .FirstOrDefaultAsync();

            // Get the number of invoices generated by this user
            int invoiceCount = await _context.Invoices
                .Where(i => i.UserId == Id)
                .CountAsync();

            // Free limit (e.g., 5 invoices before subscription is required)
            int freeLimit = 5;

            if (subscription == null)
            {
                // User has no active subscription — check free usage
                var remainingFree = Math.Max(freeLimit - invoiceCount, 0);

                return Ok(new
                {
                    hasActiveSubscription = false,
                    planName = "Free Trial",
                    invoicesUsed = invoiceCount,
                    freeLimit,
                    remainingFree,
                    message = remainingFree > 0
                        ? $"You have {remainingFree} free invoice(s) left."
                        : "Free trial ended. Please subscribe to continue."
                });
            }

            // Calculate remaining days for active subscription
            int remainingDays = (int)(subscription.EndDate - DateTime.UtcNow).TotalDays;

            return Ok(new
            {
                hasActiveSubscription = true,
                subscription.PlanName,
                subscription.StartDate,
                subscription.EndDate,
                remainingDays,
                message = $"Subscription active — {remainingDays} day(s) left."
            });
        }

        [Authorize]
        [HttpPost("select")]
        public async Task<IActionResult> SelectPlan([FromBody] SelectPlanRequest request)
        {
            // Example request: { plan: "30 days" }
            if (request.Plan == "Free Tier")
            {
                //await _service.SubscribeAsync(User.Identity.Name);
                return Ok(new { message = "Free plan activated successfully!" });
            }
            var userEmail = User.FindFirstValue(ClaimTypes.Email);
            // Otherwise, generate a payment link
            var paymentUrl = await _paystackService.InitializePaymentAsync(
                userEmail: userEmail,
                planName: request.Plan
            );

            return Ok(new { paymentUrl });
        }

        [HttpGet("verify")]
        public async Task<IActionResult> Verify([FromQuery] string reference)
        {
            var verificationResult = await _paystackService.VerifyPaymentAsync(reference);
            if (verificationResult == null || !verificationResult.Status)
            {
                return Redirect($"http://zucoinvoice.vercel.app/dashboard?status=failed&message=Payment%20verification%20failed");
            }

            var email = verificationResult.CustomerEmail;
            var plan = verificationResult.PlanName;

            await _service.ActivatePaidPlanAsync(email, plan, reference);

            return Redirect($"http://zucoinvoice.vercel.app/dashboard?status=success&message=Subscription%20activated%20successfully");
        }
    }


    public class SelectPlanRequest
    {
        public string Plan { get; set; }
    }


    public class SubscribeRequest
    {
        public string UserId { get; set; }
        public string PlanName { get; set; }

        public string Reference { get; set; }
    }
}
